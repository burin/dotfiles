#!/usr/bin/env ruby

require 'logger'
require 'uri'

@logger = Logger.new(STDOUT)

unless system('git rev-parse --is-inside-work-tree')
  @logger.error 'Not a Git repository.'
  exit
end

origin_remote_url = %x( git config --get remote.origin.url ).strip
@logger.debug "Remote URL:   #{origin_remote_url}"

website_url  = origin_remote_url.match('^git@(.*):')[1]
@logger.debug "GitLab host:  #{website_url}"

account_name = origin_remote_url.match(':(.*)\/')[1]
@logger.debug "Account name: #{account_name}"

project_name = origin_remote_url.match('\/(.*).git$')[1]
@logger.debug "Project name: #{project_name}"

branch_name = %x( git symbolic-ref HEAD 2>/dev/null | cut -d"/" -f 3 ).strip
@logger.debug "Branch name:  #{branch_name}"

project_url = URI::join "https://#{website_url}",
                        "/#{account_name}/",
                        "#{project_name}"

@logger.debug "Project URL:  #{project_url}"

url_to_open = project_url

if commit_hash
  url_to_open = URI.join("#{project_url}/", "commit/#{commit_hash}")
  @logger.debug "Commit URL:   #{url_to_open}"
elsif branch_name && branch_name != 'master'
  url_to_open = URI.join("#{project_url}/", "tree/#{branch_name}")
  @logger.debug "Branch URL:   #{url_to_open}"
end

@logger.debug "Opening URL:  #{url_to_open}"
`open '#{url_to_open}'`
